name: Result Service Sysdig Scan

on:
  # Run when image is built and pushed
  workflow_run:
    workflows: ["Build Result"]
    types:
      - completed
    branches:
      - main

env:
  SYSDIG_SECURE_ENDPOINT: "https://app.sysdig.com"
  REGISTRY_HOST: "ghcr.io"
  IMAGE_NAME: "alexgoller/example-voting-app-result"
  IMAGE_TAG: "latest"

jobs:
  sysdig-scan:
    name: Sysdig Secure Scan
    runs-on: ubuntu-latest
    # Only run if the build workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      security-events: write  # needed for uploading SARIF results
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: cache
          key: ${{ runner.os }}-cache-${{ hashFiles('**/sysdig-cli-scanner', '**/latest_version.txt', '**/db/main.db.meta.json', '**/scanner-cache/inlineScannerCache.db') }}
          restore-keys: ${{ runner.os }}-cache-

      - name: Download sysdig-cli-scanner if needed
        run: |
          curl -sLO https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt
          mkdir -p ${GITHUB_WORKSPACE}/cache/db/
          if [ ! -f ${GITHUB_WORKSPACE}/cache/latest_version.txt ] || [ $(cat ./latest_version.txt) != $(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt) ]; then
            cp ./latest_version.txt ${GITHUB_WORKSPACE}/cache/latest_version.txt
            curl -sL -o ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
            chmod +x ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner
          else
            echo "sysdig-cli-scanner latest version already downloaded"
          fi

      - name: Scan the image using sysdig-cli-scanner
        env:
          SECURE_API_TOKEN: ${{ secrets.SECURE_API_TOKEN }}
        run: |
          ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner \
            --apiurl ${SYSDIG_SECURE_ENDPOINT} \
            docker://${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG} \
            --console-log \
            --dbpath=${GITHUB_WORKSPACE}/cache/db/ \
            --cachepath=${GITHUB_WORKSPACE}/cache/scanner-cache/ \
            --output=json
            
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()  # Upload results even if scan fails
        with:
          sarif_file: results.sarif
